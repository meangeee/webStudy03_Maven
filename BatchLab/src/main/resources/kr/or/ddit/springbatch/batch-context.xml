<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

<!-- 	가능하면 소문자 t로 시작하는 녀석으로 바꾸자고 했지? = 왜요 -->
<!-- 	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"  -->
	
	
<!-- 	/> -->
 <!-- 	이건 할때마다 모르겠어요. --> 
<!-- 	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean"  -->
<!-- 		p:transactionManager-ref="transactionManager" -->
	
<!-- 	/> -->

	<!--트랙잭션매니저가 디비를 사용한다고 함-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
		p:dataSource-ref="dataSource"
	/>

	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean" 
		p:dataSource-ref="dataSource"
		p:transactionManager-ref="transactionManager"
	/>
	
<!-- 	job의 구조가 나온거래요 -->
	<!-- job을 실행하는 녀석이기 때문에 injection을 해줘야한다나 뭐라나 -->
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher"
		p:jobRepository-ref="jobRepository"
	 />
	
	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry" />
	
	<bean id="" class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor" 
		p:jobRegistry-ref="jobRegistry"
	/>
	
	<!-- 얘 하나로 가지고 놀면 된데 -->
	<bean id="jobOperator" class="org.springframework.batch.core.launch.support.SimpleJobOperator" 
		p:jobRepository-ref="jobRepository"
		p:jobLauncher-ref="jobLauncher"
		p:jobExplorer-ref="jobExplroer"
		p:jobRegistry-ref="jobRegistry"
	
	/>
	
   <bean id="simpleLogStep" class="kr.or.ddit.springbatch.SimpleLogStep" />
   <bean id="tasklet" class="org.springframework.batch.core.step.tasklet.MethodInvokingTaskletAdapter"
      p:targetObject-ref="simpleLogStep"
      p:targetMethod="previous"
   />
	
	<bean id="jobExplroer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean" 
		p:dataSource-ref="dataSource"
		p:tablePrefix="BATCH_"
	/>	
	
	<bean id="flatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		p:resource="classpath:sample-data.csv"
	>
		<!-- lineMapper 한줄의 데이터가 우리가 갖고 놀아야하는 데이터 컴마를 기준으로 쪼갠다음에 person객체.. 그내용이 여기에들어가야한다고? -->
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- line을 어떻게 쪼갤거냐 lineTokenizer -->
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer" 
						p:delimiter=","
						p:names="firstName,lastName"
					/>
				</property>
				<!-- fieldSetMapper 구현체가 필요함 -->
				<property name="fieldSetMapper">
<!-- 						우리가 만들어야할 객체의 퀄리파이드 네임 person의 -->
					<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper" 
						p:targetType="kr.or.ddit.springbatch.Person"
					/>
				</property>
			</bean>
		</property>	
	
	</bean>
	<bean id="personItemProcessor" class="kr.or.ddit.springbatch.PersonItemProcessor" />
	<!-- db를 사용하려면 dataSource를 써야함 근데 우리 설정안해놔서 지금 못 씀 -->
	<!-- ref할때 코드 어시스트 안되서 spring element가서 묶어줬음 -->
	<bean id="jdbcBatchItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter" 
		p:dataSource-ref="dataSource"
	>
		<!-- 얘는 놓쳤어요. -->
		<property name="sql">
			<value>
				 INSERT INTO people 
				 (first_name, last_name) 
				 VALUES (:firstName, :lastName)
			</value>
		</property>
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>
	
	<bean id="myBatisPagingItemReader" class="org.mybatis.spring.batch.MyBatisPagingItemReader"
      p:sqlSessionFactory-ref="sqlSessionFactory"
      p:queryId="kr.or.ddit.springbatch.mappers.person.selectPeople"
      p:pageSize="4" >
   	</bean>
   
<!--    d:/result-data.csv에 파일저장 -->
   <bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter"
      p:resource="file:d:/result-data.csv"
      p:appendAllowed="false"
      p:shouldDeleteIfExists="true"
   >
      <property name="lineAggregator">
         <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator"
            p:delimiter=","
         >
            <property name="fieldExtractor">
               <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor" 
               		p:names="firstName,lastName"
               />
            </property>
         </bean>
      </property>
   </bean>
   
	
	<batch:job id="personJob">
		<!-- 이건 뭔지 모르겠네요 -->
		<!-- container 등록이라는데 = 주입 받을 수 있음 -->
		<batch:listeners>
			<batch:listener>
				<bean class="kr.or.ddit.springbatch.JobCompletionNotificationListener"/>
			</batch:listener>
		</batch:listeners>
		<batch:step id="previouStep" next="personStep">
				<batch:tasklet ref="tasklet" />
		</batch:step>
		<!-- next로 다음에 실행 할 step 지정 -->
		<!-- 파일을 읽어서 db에 저장 -->
		<batch:step id="personStep" next="nextStep">
			<batch:tasklet>
				<batch:chunk
					commit-interval="4"
					reader="flatFileItemReader"
					processor="personItemProcessor"
					writer="jdbcBatchItemWriter"
				/>
			</batch:tasklet>
		</batch:step>
		
		<!-- personStep 다음에 실행해야함 -->
		<!-- db에있는 걸 읽어서 파일로 저장 -->
		<!-- 읽고 쓰고는 생략 불가능 근데 processor은 생략가능 -->
		<batch:step id="nextStep">
			<batch:tasklet>
				<batch:chunk 
					commit-interval="4"
					reader="myBatisPagingItemReader"
					writer="flatFileItemWriter"
				/>
			</batch:tasklet>
		</batch:step>
	</batch:job>
</beans>
